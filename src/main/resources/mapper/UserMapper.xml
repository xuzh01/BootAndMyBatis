<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.mapper.UserMapper">
  <resultMap id="BaseResultMap" type="com.example.demo.entity.User">
    <id column="u_id" jdbcType="INTEGER" property="uid" />
    <result column="u_name" jdbcType="VARCHAR" property="uname" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="roleid" jdbcType="INTEGER" property="roleid" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createtime" />
    <result column="score" jdbcType="INTEGER" property="score" />
  </resultMap>

  <resultMap id="BaseResultMap1" type="com.example.demo.entity.User">
    <id column="u_id" jdbcType="INTEGER" property="uid" />
    <result column="u_name" jdbcType="VARCHAR" property="uname" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="roleid" jdbcType="INTEGER" property="roleid" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createtime" />
    <result column="score" jdbcType="INTEGER" property="score" />
    <association property="role" javaType="com.example.demo.entity.Role">
      <id column="roleid" property="roleid"></id>
      <result column="roleName" property="rolename"></result>
    </association>
  </resultMap>

  <select id="findAll" resultMap="BaseResultMap1">
    select * from user as a join roleinfo as b on a.roleid=b.roleid
  </select>

   <!--多表查询-&#45;&#45;多对一方法2-->
  <!--<resultMap id="BaseResultMap2" type="com.example.demo.entity.User">-->
    <!--<id column="u_id" jdbcType="INTEGER" property="uid" />-->
    <!--<result column="u_name" jdbcType="VARCHAR" property="uname" />-->
    <!--<result column="password" jdbcType="VARCHAR" property="password" />-->
    <!--<result column="roleid" jdbcType="INTEGER" property="roleid" />-->
    <!--<result column="create_time" jdbcType="TIMESTAMP" property="createtime" />-->
    <!--<result column="score" jdbcType="INTEGER" property="score" />-->
    <!--<association property="role" column="roleid" select="findRole">-->
      <!--<id column="roleid" property="roleid"></id>-->
      <!--<result column="roleName" property="rolename"></result>-->
    <!--</association>-->
  <!--</resultMap>-->

  <!--&lt;!&ndash;parameterType是一个对象就用${}，是一个int，double之类的用#{}&ndash;&gt;-->
  <!--<select id="findRole" parameterType="int" resultType="com.example.demo.entity.Role">-->
    <!--select * from roleinfo where roleid=#{roleid}-->
  <!--</select>-->

  <!--<select id="find" resultMap="BaseResultMap2">-->
    <!--select * from user-->
  <!--</select>-->


  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    u_id, u_name, password, roleid, create_time, score
  </sql>
  <select id="selectByExample" parameterType="com.example.demo.entity.UserExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from user
    where uid = #{uid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from user
    where uid = #{uid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.example.demo.entity.UserExample">
    delete from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.example.demo.entity.User">
    insert into user (uname, password,
      roleid, createtime, score
      )
    values (#{uname,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR},
      #{roleid,jdbcType=INTEGER}, #{createtime,jdbcType=TIMESTAMP}, #{score,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.example.demo.entity.User">
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="uid != null">
        uid,
      </if>
      <if test="uname != null">
        uname,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="roleid != null">
        roleid,
      </if>
      <if test="createtime != null">
        createtime,
      </if>
      <if test="score != null">
        score,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="uid != null">
        #{uid,jdbcType=INTEGER},
      </if>
      <if test="uname != null">
        #{uname,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="roleid != null">
        #{roleid,jdbcType=INTEGER},
      </if>
      <if test="createtime != null">
        #{createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="score != null">
        #{score,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.example.demo.entity.UserExample" resultType="java.lang.Long">
    select count(*) from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update user
    <set>
      <if test="record.uid != null">
        uid = #{record.uid,jdbcType=INTEGER},
      </if>
      <if test="record.uname != null">
        uname = #{record.uname,jdbcType=VARCHAR},
      </if>
      <if test="record.password != null">
        password = #{record.password,jdbcType=VARCHAR},
      </if>
      <if test="record.roleid != null">
        roleid = #{record.roleid,jdbcType=INTEGER},
      </if>
      <if test="record.createtime != null">
        createtime = #{record.createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.score != null">
        score = #{record.score,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update user
    set uid = #{record.uid,jdbcType=INTEGER},
      uname = #{record.uname,jdbcType=VARCHAR},
      password = #{record.password,jdbcType=VARCHAR},
      roleid = #{record.roleid,jdbcType=INTEGER},
      createtime = #{record.createtime,jdbcType=TIMESTAMP},
      score = #{record.score,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.demo.entity.User">
    update user
    <set>
      <if test="uname != null">
        uname = #{uname,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="roleid != null">
        roleid = #{roleid,jdbcType=INTEGER},
      </if>
      <if test="createtime != null">
        createtime = #{createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="score != null">
        score = #{score,jdbcType=INTEGER},
      </if>
    </set>
    where uid = #{uid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.demo.entity.User">
    update user
    set uname = #{uname,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      roleid = #{roleid,jdbcType=INTEGER},
      createtime = #{createtime,jdbcType=TIMESTAMP},
      score = #{score,jdbcType=INTEGER}
    where uid = #{uid,jdbcType=INTEGER}
  </update>
</mapper>